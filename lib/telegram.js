// lib/telegram.js - Utilit√°rios para notifica√ß√µes do Telegram

// CONFIGURA√á√ïES DO BOT - CONFIGURADO E PRONTO PARA USO
const TELEGRAM_CONFIG = {
  BOT_TOKEN: '7718018841:AAFiSbC6eLFcDQ1PBPl4STjArVPpK4lz1qg',
  ADMIN_CHAT_ID: '7571418194', // Seu Chat ID
  API_URL: 'https://api.telegram.org/bot'
};

// Formata√ß√£o de dinheiro para mensagem
const formatMoney = (number) => {
  if (!number || number === 0) return '0.00';
  const num = Math.abs(number);
  if (num >= 1000000000000000000) return (num / 1000000000000000000).toFixed(2).replace(/\.?0+$/, '') + 'kkkkkkkk';
  if (num >= 1000000000000000) return (num / 1000000000000000).toFixed(2).replace(/\.?0+$/, '') + 'kkkkkkk';
  if (num >= 1000000000000) return (num / 1000000000000).toFixed(2).replace(/\.?0+$/, '') + 'kkkkkk';
  if (num >= 1000000000) return (num / 1000000000).toFixed(2).replace(/\.?0+$/, '') + 'kkkkk';
  if (num >= 1000000) return (num / 1000000).toFixed(2).replace(/\.?0+$/, '') + 'kkkk';
  if (num >= 1000) return (num / 1000).toFixed(2).replace(/\.?0+$/, '') + 'kkk';
  if (num >= 1) return (num).toFixed(2).replace(/\.?0+$/, '') + 'kk';
  return num.toFixed(2);
};

/**
 * Envia notifica√ß√£o de nova solicita√ß√£o de dep√≥sito para o Telegram
 * @param {Object} depositData - Dados da solicita√ß√£o de dep√≥sito
 * @param {string} depositId - ID da solicita√ß√£o criada
 */
export const sendDepositNotification = async (depositData, depositId) => {
  try {
    console.log('üì± Enviando notifica√ß√£o para Telegram...');

    // Verificar se as configura√ß√µes est√£o definidas
    if (!TELEGRAM_CONFIG.BOT_TOKEN || TELEGRAM_CONFIG.BOT_TOKEN === 'SEU_BOT_TOKEN_AQUI') {
      console.warn('‚ö†Ô∏è Token do bot n√£o configurado - notifica√ß√£o n√£o enviada');
      return false;
    }

    if (!TELEGRAM_CONFIG.ADMIN_CHAT_ID || TELEGRAM_CONFIG.ADMIN_CHAT_ID === 'SEU_CHAT_ID_AQUI') {
      console.warn('‚ö†Ô∏è Chat ID n√£o configurado - notifica√ß√£o n√£o enviada');
      return false;
    }

    // Construir a mensagem
    const message = `
üîî *NOVA SOLICITA√á√ÉO DE DEP√ìSITO*

üë§ *Nome:* ${depositData.userName || 'N/A'}
üìß *Email:* ${depositData.userEmail || 'N/A'}
üí∞ *Valor:* $ ${formatMoney(depositData.amount)}
üìù *Descri√ß√£o:* ${depositData.description || 'Sem descri√ß√£o'}

üÜî *ID:* \`${depositId.substring(0, 8)}...\`
‚è∞ *Data:* ${new Date().toLocaleString('pt-BR')}

üîó [Acessar Painel Admin](${window.location.origin}/admin/deposits)

‚ö° *A√ß√£o necess√°ria:* Aprovar ou rejeitar esta solicita√ß√£o
`.trim();

    // Dados para envio
    const payload = {
      chat_id: TELEGRAM_CONFIG.ADMIN_CHAT_ID,
      text: message,
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    };

    // Enviar para API do Telegram
    const response = await fetch(
      `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }
    );

    if (response.ok) {
      const result = await response.json();
      if (result.ok) {
        console.log('‚úÖ Notifica√ß√£o enviada para Telegram com sucesso!');
        return true;
      } else {
        console.error('‚ùå Erro na resposta do Telegram:', result);
        return false;
      }
    } else {
      console.error('‚ùå Erro HTTP ao enviar para Telegram:', response.status);
      return false;
    }

  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o para Telegram:', error);
    return false;
  }
};

/**
 * Envia notifica√ß√£o quando um dep√≥sito √© aprovado
 * @param {Object} depositData - Dados da solicita√ß√£o aprovada
 * @param {string} depositId - ID da solicita√ß√£o
 */
export const sendDepositApprovedNotification = async (depositData, depositId) => {
  try {
    if (!TELEGRAM_CONFIG.BOT_TOKEN || !TELEGRAM_CONFIG.ADMIN_CHAT_ID) {
      return false;
    }

    const message = `
‚úÖ *DEP√ìSITO APROVADO*

üë§ *Cliente:* ${depositData.userName || 'N/A'}
üí∞ *Valor:* $ ${formatMoney(depositData.amount)}
üÜî *ID:* \`${depositId.substring(0, 8)}...\`
‚è∞ *Aprovado em:* ${new Date().toLocaleString('pt-BR')}

üí≥ *Saldo creditado com sucesso!*
`.trim();

    const payload = {
      chat_id: TELEGRAM_CONFIG.ADMIN_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    };

    const response = await fetch(
      `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }
    );

    return response.ok;
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o de aprova√ß√£o:', error);
    return false;
  }
};

/**
 * Envia notifica√ß√£o quando um dep√≥sito √© rejeitado
 * @param {Object} depositData - Dados da solicita√ß√£o rejeitada
 * @param {string} depositId - ID da solicita√ß√£o
 * @param {string} reason - Motivo da rejei√ß√£o
 */
export const sendDepositRejectedNotification = async (depositData, depositId, reason) => {
  try {
    if (!TELEGRAM_CONFIG.BOT_TOKEN || !TELEGRAM_CONFIG.ADMIN_CHAT_ID) {
      return false;
    }

    const message = `
‚ùå *DEP√ìSITO REJEITADO*

üë§ *Cliente:* ${depositData.userName || 'N/A'}
üí∞ *Valor:* $ ${formatMoney(depositData.amount)}
üÜî *ID:* \`${depositId.substring(0, 8)}...\`
‚è∞ *Rejeitado em:* ${new Date().toLocaleString('pt-BR')}
üìù *Motivo:* ${reason || 'N√£o especificado'}
`.trim();

    const payload = {
      chat_id: TELEGRAM_CONFIG.ADMIN_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    };

    const response = await fetch(
      `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }
    );

    return response.ok;
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o de rejei√ß√£o:', error);
    return false;
  }
};

/**
 * Testa a configura√ß√£o do bot enviando uma mensagem de teste
 */
export const testTelegramBot = async () => {
  try {
    const message = `
ü§ñ *TESTE DO BOT RR EXCHANGE*

‚úÖ Bot configurado corretamente!
‚è∞ ${new Date().toLocaleString('pt-BR')}

O sistema de notifica√ß√µes est√° funcionando.
`.trim();

    const payload = {
      chat_id: TELEGRAM_CONFIG.ADMIN_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    };

    const response = await fetch(
      `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }
    );

    if (response.ok) {
      console.log('‚úÖ Teste do bot realizado com sucesso!');
      return true;
    } else {
      console.error('‚ùå Falha no teste do bot');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro no teste do bot:', error);
    return false;
  }
};