// lib/telegram.js - SISTEMA DE NOTIFICA√á√ïES TELEGRAM
// VERS√ÉO FINAL FUNCIONAL - ESCRITO DO ZERO

// ========== CONFIGURA√á√ïES ==========
const BOT_TOKEN = '7718018841:AAFiSbC6eLFcDQ1PBPl4STjArVPpK4lz1qg';
const CHAT_ID = '-1002528864327';
const API_BASE = 'https://api.telegram.org/bot';

// ========== UTILIT√ÅRIOS ==========
const formatMoney = (value) => {
  if (!value) return '0.00';
  return parseFloat(value).toFixed(2);
};

const getCurrentTime = () => {
  return new Date().toLocaleString('pt-BR', {
    timeZone: 'America/Sao_Paulo'
  });
};

// ========== FUN√á√ÉO BASE ==========
const sendTelegramMessage = async (message) => {
  console.log('=== ENVIO TELEGRAM ===');
  console.log('Mensagem:', message);
  console.log('Chat ID:', CHAT_ID);
  
  try {
    const url = `${API_BASE}${BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message
      })
    });

    const result = await response.json();
    
    console.log('Status:', response.status);
    console.log('Resposta:', result);
    
    if (response.ok && result.ok) {
      console.log('‚úÖ MENSAGEM ENVIADA COM SUCESSO');
      return true;
    } else {
      console.error('‚ùå ERRO NA RESPOSTA:', result);
      return false;
    }
  } catch (error) {
    console.error('‚ùå ERRO DE REDE:', error);
    return false;
  }
};

// ========== NOTIFICA√á√ÉO DE DEP√ìSITO ==========
export const sendDepositNotification = async (data, id) => {
  console.log('üí∞ INICIANDO NOTIFICA√á√ÉO DE DEP√ìSITO');
  console.log('üí∞ Dados recebidos:', data);
  console.log('üí∞ ID recebido:', id);
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos para dep√≥sito');
    return false;
  }

  const message = `üîî NOVO DEPOSITO

üë§ Cliente: ${data.userName || 'N/A'}
üìß Email: ${data.userEmail || 'N/A'}
üí∞ Valor: $${formatMoney(data.amount)}
üìù Descricao: ${data.description || 'Sem descricao'}
üÜî ID: ${id.substring(0, 10)}
‚è∞ Horario: ${getCurrentTime()}

Acesse o painel admin para aprovar ou rejeitar.

#deposito #pendente #admin`;

  console.log('üí∞ Enviando mensagem...');
  const success = await sendTelegramMessage(message);
  console.log('üí∞ Resultado:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== NOTIFICA√á√ÉO DE VERIFICA√á√ÉO ==========
export const sendProfileVerificationRequest = async (data, id) => {
  console.log('üõ°Ô∏è INICIANDO NOTIFICA√á√ÉO DE VERIFICA√á√ÉO');
  console.log('üõ°Ô∏è Dados recebidos:', data);
  console.log('üõ°Ô∏è ID recebido:', id);
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos para verifica√ß√£o');
    return false;
  }

  const message = `üõ°Ô∏è NOVA VERIFICACAO

üë§ Usuario: ${data.userName || 'N/A'}
üìß Email: ${data.userEmail || 'N/A'}
üì± Telegram: ${data.telegramNumber || 'N/A'}
üéÆ Rival Regions: ${data.rivalRegionsLink || 'N/A'}
üÜî ID Solicitacao: ${id.substring(0, 10)}
üë§ ID Usuario: ${data.userId ? data.userId.substring(0, 10) : 'N/A'}
‚è∞ Horario: ${getCurrentTime()}

Dados para verificacao:
‚úÖ Nome preenchido
‚úÖ Telegram informado  
‚úÖ Rival Regions vinculado

Acesse o painel admin para aprovar ou rejeitar.

#verificacao #pendente #admin`;

  console.log('üõ°Ô∏è Enviando mensagem...');
  const success = await sendTelegramMessage(message);
  console.log('üõ°Ô∏è Resultado:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== APROVA√á√ÉO DE DEP√ìSITO ==========
export const sendDepositApprovedNotification = async (data, id) => {
  console.log('‚úÖ INICIANDO NOTIFICA√á√ÉO DE APROVA√á√ÉO DE DEP√ìSITO');
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos');
    return false;
  }

  const message = `‚úÖ DEPOSITO APROVADO

üë§ Cliente: ${data.userName || 'N/A'}
üí∞ Valor: $${formatMoney(data.amount)}
üÜî ID: ${id.substring(0, 10)}
‚è∞ Aprovado em: ${getCurrentTime()}

üí≥ Saldo creditado com sucesso!

#deposito #aprovado #sucesso`;

  const success = await sendTelegramMessage(message);
  console.log('‚úÖ Resultado aprova√ß√£o:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== REJEI√á√ÉO DE DEP√ìSITO ==========
export const sendDepositRejectedNotification = async (data, id, reason) => {
  console.log('‚ùå INICIANDO NOTIFICA√á√ÉO DE REJEI√á√ÉO DE DEP√ìSITO');
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos');
    return false;
  }

  const message = `‚ùå DEPOSITO REJEITADO

üë§ Cliente: ${data.userName || 'N/A'}
üí∞ Valor: $${formatMoney(data.amount)}
üìù Motivo: ${reason || 'Nao especificado'}
üÜî ID: ${id.substring(0, 10)}
‚è∞ Rejeitado em: ${getCurrentTime()}

#deposito #rejeitado`;

  const success = await sendTelegramMessage(message);
  console.log('‚ùå Resultado rejei√ß√£o:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== APROVA√á√ÉO DE VERIFICA√á√ÉO ==========
export const sendProfileVerificationApproved = async (data, id) => {
  console.log('‚úÖ INICIANDO NOTIFICA√á√ÉO DE APROVA√á√ÉO DE VERIFICA√á√ÉO');
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos');
    return false;
  }

  const message = `‚úÖ VERIFICACAO APROVADA

üë§ Usuario: ${data.userName || 'N/A'}
üõ°Ô∏è Status: PERFIL VERIFICADO
üÜî ID: ${id.substring(0, 10)}
‚è∞ Aprovado em: ${getCurrentTime()}

üéâ O usuario agora possui o selo de verificacao!

#verificacao #aprovada #selo`;

  const success = await sendTelegramMessage(message);
  console.log('‚úÖ Resultado aprova√ß√£o verifica√ß√£o:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== REJEI√á√ÉO DE VERIFICA√á√ÉO ==========
export const sendProfileVerificationRejected = async (data, id, reason) => {
  console.log('‚ùå INICIANDO NOTIFICA√á√ÉO DE REJEI√á√ÉO DE VERIFICA√á√ÉO');
  
  if (!data || !id) {
    console.error('‚ùå Dados inv√°lidos');
    return false;
  }

  const message = `‚ùå VERIFICACAO REJEITADA

üë§ Usuario: ${data.userName || 'N/A'}
üìù Motivo: ${reason || 'Nao especificado'}
üÜî ID: ${id.substring(0, 10)}
‚è∞ Rejeitado em: ${getCurrentTime()}

‚ÑπÔ∏è O usuario pode corrigir e solicitar novamente.

#verificacao #rejeitada`;

  const success = await sendTelegramMessage(message);
  console.log('‚ùå Resultado rejei√ß√£o verifica√ß√£o:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== TESTE B√ÅSICO ==========
export const testTelegramBot = async () => {
  console.log('üß™ INICIANDO TESTE DO BOT');
  
  const message = `ü§ñ TESTE DO BOT RR EXCHANGE

‚úÖ Bot configurado e funcionando
‚è∞ Horario: ${getCurrentTime()}
üöÄ Sistema: RR Exchange
üì± Grupo: Funcionando

Todas as notificacoes estao ativas:
‚Ä¢ Depositos
‚Ä¢ Verificacoes  
‚Ä¢ Aprovacoes
‚Ä¢ Rejeicoes

#teste #bot #funcionando`;

  const success = await sendTelegramMessage(message);
  console.log('üß™ Resultado do teste:', success ? 'SUCESSO' : 'FALHA');
  
  return success;
};

// ========== VERIFICAR CONFIGURA√á√ÉO ==========
export const isTelegramConfigured = () => {
  const configured = !!(BOT_TOKEN && CHAT_ID && BOT_TOKEN.length > 10);
  console.log('üîß Telegram configurado:', configured);
  return configured;
};

// ========== INFORMA√á√ïES DO BOT ==========
export const getTelegramInfo = () => {
  return {
    hasToken: !!BOT_TOKEN,
    hasChatId: !!CHAT_ID,
    configured: isTelegramConfigured(),
    chatId: CHAT_ID,
    tokenPrefix: BOT_TOKEN ? BOT_TOKEN.substring(0, 10) + '...' : 'N/A'
  };
};

// ========== LOGS INICIAIS ==========
console.log('üì± TELEGRAM.JS CARREGADO');
console.log('üîß Configura√ß√£o:', getTelegramInfo());

// ========== EXPORTS ADICIONAIS ==========
export default {
  sendDepositNotification,
  sendProfileVerificationRequest,
  sendDepositApprovedNotification,
  sendDepositRejectedNotification,
  sendProfileVerificationApproved,
  sendProfileVerificationRejected,
  testTelegramBot,
  isTelegramConfigured,
  getTelegramInfo
};

// ========== NOTAS DE DEBUG ==========
/*
PARA DEBUGAR:
1. Verifique se BOT_TOKEN e CHAT_ID est√£o corretos
2. Teste com testTelegramBot() primeiro
3. Verifique os logs no console
4. Confirme que o bot est√° no grupo
5. Verifique se n√£o h√° bloqueios de CORS

FORMATO DAS MENSAGENS:
- Sem Markdown para evitar erros de parsing
- Caracteres especiais removidos (√£, √ß, etc.)
- Emojis mantidos para identifica√ß√£o visual
- Hashtags para organiza√ß√£o no grupo

ESTRUTURA DOS DADOS:
depositData = {
  userName: string,
  userEmail: string,
  amount: number,
  description: string
}

verificationData = {
  userName: string,
  userEmail: string,
  telegramNumber: string,
  rivalRegionsLink: string,
  userId: string
}
*/